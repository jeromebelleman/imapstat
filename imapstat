#! /usr/bin/env python

import sys
import getpass
import imaplib
from datetime import date, datetime
import time
import matplotlib.pyplot as plt
import optparse

# Used to be 2000, but doesn't fit anymore, probably because the string
# became too long what with these 5 character indices.
CHUNKSIZE = 1500
MAILBOX = 'INBOX'
BINS = 10
MONTHLEN = 31

def main():
    # Parse arguments
    p = optparse.OptionParser()
    p.add_option('-s', '--server', help="server name")
    p.add_option('-m', '--mailbox', default=MAILBOX,
                 help="mailbox (defaults to %s)" % MAILBOX)
    p.add_option('-b', '--bins', default=BINS, type='int',
                 help="number of bins (defaults to %d)" % BINS)
    p.add_option('-d', '--day', action='store_true', help='bin per day')
    p.add_option('-w', '--week', action='store_true', help='bin per week')
    help = 'bin per (approximate) month'
    p.add_option('-n', '--month', action='store_true', help=help)
    p.add_option('-a', '--averages', action='store_true', help='averages')
    opts, args = p.parse_args()

    # Connect
    m = imaplib.IMAP4_SSL(opts.server)
    m.login(raw_input('Login: '), getpass.getpass())

    # Select mailbox
    m.select(opts.mailbox, readonly=True)

    # Search messages
    _, data = m.search(None, 'ALL')
    data = data[0].split()

    # Fetch messages
    begin, end = 0, CHUNKSIZE
    dates = []
    while begin < len(data):
        chunk = data[begin:end]
        begin += CHUNKSIZE
        end += CHUNKSIZE

        chunk = ','.join(chunk)
        for d in m.fetch(chunk, 'INTERNALDATE')[1]:
            dates.append(time.mktime(imaplib.Internaldate2tuple(d)))

    # Create data for histogram and close it
    d = date.fromtimestamp(dates[-1]) - date.fromtimestamp(dates[0])
    if opts.averages:
        print "%.2f mails/day" % (float(len(dates)) / d.days)
        print "%.2f mails/week" % (float(len(dates)) / d.days * 7)
        print "%.2f mails/month" % (float(len(dates)) / d.days * MONTHLEN)
    else:
        if opts.day:
            bins = d.days
            title = "number of mails per day"
        elif opts.week:
            bins = d.days / 7
            title = "number of mails per week"
        elif opts.month:
            bins = d.days / MONTHLEN
            title = "number of mails per (approximate) month"
        else:
            # Per what is that?
            per = d / opts.bins

            bins = opts.bins
            title = "number of mails per %d days" % per.days
        n, bins, patches = plt.hist(dates, bins=bins)
        plt.close()

        # Plot
        fig, ax = plt.subplots(1)
        plt.title(title)
        fig.autofmt_xdate()
        ax.plot([date.fromtimestamp(t) for t in bins[1:]], n)
        plt.show()

if __name__ == '__main__':
    sys.exit(main())
